" Dark powered mode of SpaceVim, generated by SpaceVim automatically.
let g:spacevim_enable_debug = 1
let g:spacevim_realtime_leader_guide = 1
call SpaceVim#layers#load('incsearch')
call SpaceVim#layers#load('lang#lua')
call SpaceVim#layers#load('lang#java')
call SpaceVim#layers#load('lang#javascript')
call SpaceVim#layers#load('lang#vim')
call SpaceVim#layers#load('lang#python')
call SpaceVim#layers#load('lang#xml')
call SpaceVim#layers#load('tools#screensaver')
call SpaceVim#layers#load('shell')   
call SpaceVim#layers#load('ui')
let g:spacevim_enable_vimfiler_welcome = 1
let g:spacevim_enable_debug = 1
let g:deoplete#auto_complete_delay = 100
let g:spacevim_enable_tabline_filetype_icon = 1
let g:spacevim_enable_os_fileformat_icon = 1
let g:spacevim_buffer_index_type = 1
let g:neomake_vim_enabled_makers = ['vimlint', 'vint']
if has('python3')
    let g:ctrlp_map = ''
    nnoremap <silent> <C-p> :Denite file_rec<CR>
endif
let g:clang2_placeholder_next = ''
let g:clang2_placeholder_prev = ''

" Set windows shortcut leader [Window], default is `s`
let g:spacevim_windows_leader = ','

" Set unite work flow shortcut leader [Unite], default is `f`
let g:spacevim_unite_leader = 'f'
set termguicolors

" Change the default directory where all miscellaneous persistent files go.
" By default it is ~/.cache/vimfiles.
let g:spacevim_plugin_bundle_dir = '~/.cache/vimfiles'
"let g:spacevim_enable_vimfiler_gitstatus=1
let g:spacevim_automatic_update = 1
let g:spacevim_enable_ycm = 1

" If you want to add some custom plugins, use these options:
let g:spacevim_custom_plugins = [
\ ['plasticboy/vim-markdown', {'on_ft' : 'markdown'}],
\ ['davidhalter/jedi-vim'],
\ ['lambdalisue/vim-gita'],
\ ['vim-syntastic/syntastic'],
\ ]
let g:gradleBin = filereadable('./gradlew') ? './gradlew' : 'gradle'
let g:neomake_java_enabled_makers = ['gradle']


" java reformat
let g:spacevim_layer_lang_java_format = '~/.cache/google-java-format-1.3-all-deps.jar'

" ======= automactic update tags file =============
function! DelTagOfFile(file)
  let fullpath = a:file
  let cwd = getcwd()
  let tagfilename = cwd . "/tags"
  let f = substitute(fullpath, cwd . "/", "", "")
  let f = escape(f, './')
  let cmd = 'sed -i "/' . f . '/d" "' . tagfilename . '"'
  let resp = system(cmd)
endfunction

function! UpdateTags()
  let f = expand("%:p")
  let cwd = getcwd()
  let tagfilename = cwd . "/tags"
  let cmd = 'ctags -R .'
  call DelTagOfFile(f)
  let resp = system(cmd)
endfunction
autocmd BufWritePost *.java,*.class,*.groovy call UpdateTags()
" ==================================================
